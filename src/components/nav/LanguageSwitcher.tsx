
import React, { useEffect, useState } from "react";
import { DropdownMenu, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { useTranslation } from "react-i18next";
import { useLanguageTransition } from "@/hooks/useLanguageTransition";
import { LanguageSwitcherButton } from "./LanguageSwitcherButton";
import { LanguageDropdownContent } from "./LanguageDropdownContent";

interface LanguageSwitcherProps {
  className?: string;
}

export function LanguageSwitcher({ className = "" }: LanguageSwitcherProps) {
  const { i18n } = useTranslation();
  const { isTransitioning, changeLanguage } = useLanguageTransition();
  const [mounted, setMounted] = useState(false);
  
  const languages = [
    { code: "ar", name: "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©", nativeName: "Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©", flag: "ðŸ‡¸ðŸ‡¦" },
    { code: "ar-iq", name: "Iraqi Arabic", nativeName: "Ø§Ù„Ø¹Ø±Ø§Ù‚ÙŠØ©", flag: "ðŸ‡®ðŸ‡¶" },
    { code: "en", name: "English", nativeName: "English", flag: "ðŸ‡ºðŸ‡¸" },
    { code: "fr", name: "French", nativeName: "FranÃ§ais", flag: "ðŸ‡«ðŸ‡·" },
    { code: "ja", name: "Japanese", nativeName: "æ—¥æœ¬èªž", flag: "ðŸ‡¯ðŸ‡µ" },
    { code: "zh", name: "Chinese", nativeName: "ä¸­æ–‡", flag: "ðŸ‡¨ðŸ‡³" }
  ];

  // Ø§Ù„ØªØ£ÙƒØ¯ Ù…Ù† ØªØ·Ø¨ÙŠÙ‚ Ø§Ù„Ø§ØªØ¬Ø§Ù‡ Ø§Ù„ØµØ­ÙŠØ­ Ø­Ø³Ø¨ Ø§Ù„Ù„ØºØ© Ø¹Ù†Ø¯ Ø§Ù„ØªØ­Ù…ÙŠÙ„
  useEffect(() => {
    setMounted(true);
    const isRTL = i18n.language === "ar" || i18n.language === "ar-iq";
    if (isRTL) {
      document.documentElement.setAttribute("dir", "rtl");
      document.body.classList.add('rtl-active');
    } else {
      document.documentElement.setAttribute("dir", "ltr");
      document.body.classList.remove('rtl-active');
    }
    
    // Ø§Ù„ØªØ£ÙƒØ¯ Ù…Ù† Ø£Ù† Ø§Ù„Ù„ØºØ© Ù…Ø·Ø¨Ù‚Ø© Ø¨Ø´ÙƒÙ„ ØµØ­ÙŠØ­
    const savedLanguage = localStorage.getItem("language");
    if (savedLanguage && savedLanguage !== i18n.language) {
      i18n.changeLanguage(savedLanguage);
    }
  }, [i18n.language, i18n]);

  // Ø§Ù„Ø¹Ø«ÙˆØ± Ø¹Ù„Ù‰ Ø§Ù„Ù„ØºØ© Ø§Ù„Ø­Ø§Ù„ÙŠØ©
  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];

  if (!mounted) {
    return null;
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <div>
          <LanguageSwitcherButton 
            className={className} 
            onClick={() => {}} 
            isTransitioning={isTransitioning}
            currentLanguageFlag={currentLanguage.flag}
          />
        </div>
      </DropdownMenuTrigger>
      <LanguageDropdownContent 
        languages={languages}
        currentLanguage={currentLanguage}
        onChangeLanguage={changeLanguage}
      />
    </DropdownMenu>
  );
}
